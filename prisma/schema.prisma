// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
  // referentialIntegrity = "prisma"
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  emailActive Boolean?
  name        String?
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  localUser   LocalUser?
  socialUser  SocialUser?
  products    Product[]
  boards      Board[]
  Chat        Chat[]
  boardChat   BoardChat[]
  productAuth ProductAuth[]
}

model SocialUser {
  id           Int     @id @default(autoincrement())
  socialId     String  @unique
  type         String
  accessToken  String?
  refreshToken String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int     @unique
}

model LocalUser {
  id       Int    @id @default(autoincrement())
  memId    String
  email    String
  password String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int    @unique
}

model Product {
  id          Int           @id @default(autoincrement())
  image       String
  title       String
  description String?
  tag         String        @default("")
  auth        Boolean       @default(false)
  ratio       String        @default("1")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  chats       Chat[]
  productAuth ProductAuth[]
  productHit  ProductHit?
  hashtag     HashTag?

  @@index([userId])
}

model Board {
  id          Int         @id @default(autoincrement())
  title       String
  description String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  boardChat   BoardChat[]
  boardHit    BoardHit?
  boardTag    BoardTag[]

  @@index([userId])
}

model Chat {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int

  @@index([productId])
  @@index([userId])
}

model BoardChat {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int

  @@index([boardId])
  @@index([userId])
}

model ProductAuth {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@index([productId])
  @@index([userId])
}

model ProductHit {
  id        Int     @id @default(autoincrement())
  hit       Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @unique
}

model BoardHit {
  id      Int   @id @default(autoincrement())
  hit     Int   @default(0)
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int   @unique
}

model HashTag {
  id        Int     @id @default(autoincrement())
  hashtag   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @unique
}

model BoardTag {
  id      Int    @id @default(autoincrement())
  hashtag String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int    @unique
}
